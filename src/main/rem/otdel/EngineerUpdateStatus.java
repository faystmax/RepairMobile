package main.rem.otdel;

import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.ArrayList;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.DefaultComboBoxModel;
import javax.swing.JOptionPane;
import javax.swing.table.TableModel;
import net.proteanit.sql.DbUtils;

/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
/**
 *
 * @author tigler
 */
public class EngineerUpdateStatus extends javax.swing.JFrame {

    /**
     * Creates new form EngineerUpdateStatus
     */
    private ListenerCloseForm listenerCloseForm;
    private int PK_order;
    ArrayList<String> pkStatus;
    ArrayList<String> valueStatus;

    public EngineerUpdateStatus(int PK_order) {
        initComponents();
        this.PK_order = PK_order;
        pkStatus = new ArrayList<String>();
        valueStatus = new ArrayList<String>();
        ResultSet resSet = null;
        String pkStat = null;
        try {
            resSet = RepairMobile.st.executeQuery("select status.pk_status,status.nameofstatus, myorder.pk_order from status"
                    + " inner join myorder on myorder.PK_status=status.PK_status"
                    + " where myorder.pk_order=" + PK_order);
            if (resSet.next()) {
                pkStat = resSet.getString(1);
            }
        } catch (SQLException ex) {
            JOptionPane.showMessageDialog(this, "Ошибка: Невозможно изменить");
            Logger.getLogger(EngineerForm.class.getName()).log(Level.SEVERE, null, ex);
            this.dispose();
        }

        try {
            resSet = RepairMobile.st.executeQuery("select pk_status,nameofstatus from status"
                    + " where pk_status= 11 or pk_status= 12 or pk_status= 13");
        } catch (SQLException ex) {
            JOptionPane.showMessageDialog(this, "Ошибка: Невозможно изменить");
            Logger.getLogger(EngineerForm.class.getName()).log(Level.SEVERE, null, ex);
            this.dispose();
        }

        TableModel tableModel = DbUtils.resultSetToTableModel(resSet);
        int indSel = -1;
        for (int i = 0; i < tableModel.getRowCount(); i++) {
            pkStatus.add(tableModel.getValueAt(i, 0).toString());
            valueStatus.add(tableModel.getValueAt(i, 1).toString());
            if (Integer.parseInt(pkStat) == Integer.parseInt(pkStatus.get(i))) {
                indSel = i;
            }
        }
        jComboBoxStatus.setModel(new DefaultComboBoxModel(valueStatus.toArray()));
        jComboBoxStatus.setSelectedIndex(indSel);
    }

    public void setListenerCloseForm(ListenerCloseForm listenerCloseForm) {
        this.listenerCloseForm = listenerCloseForm;
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jComboBoxStatus = new javax.swing.JComboBox<>();
        jLabel1 = new javax.swing.JLabel();
        jButtonAccept = new javax.swing.JButton();
        jButtonCancel = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("Изменение статус");

        jLabel1.setText("Статус");

        jButtonAccept.setText("Применить");
        jButtonAccept.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonAcceptActionPerformed(evt);
            }
        });

        jButtonCancel.setText("Отмена");
        jButtonCancel.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonCancelActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addComponent(jLabel1)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jComboBoxStatus, javax.swing.GroupLayout.PREFERRED_SIZE, 224, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addComponent(jButtonCancel)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jButtonAccept)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(39, 39, 39)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jComboBoxStatus, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel1))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 47, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jButtonAccept)
                    .addComponent(jButtonCancel))
                .addGap(23, 23, 23))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jButtonAcceptActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonAcceptActionPerformed

        if (jComboBoxStatus.getSelectedIndex() == -1) {
            JOptionPane.showMessageDialog(this, "Невозможно изменить на пустое поле");
        } else {
            try {
                RepairMobile.st.executeQuery("UPDATE myorder SET pk_status= '" + pkStatus.get(jComboBoxStatus.getSelectedIndex()) + "' WHERE PK_order=" + PK_order);
                JOptionPane.showMessageDialog(this, "Запись успешно изменена");
                listenerCloseForm.event();
            } catch (SQLException ex) {
                JOptionPane.showMessageDialog(this, "Ошибка: Невозможно изменить");
                Logger.getLogger(EngineerForm.class.getName()).log(Level.SEVERE, null, ex);
            }
            this.dispose();
        }
    }//GEN-LAST:event_jButtonAcceptActionPerformed

    private void jButtonCancelActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonCancelActionPerformed
        // TODO add your handling code here:
        listenerCloseForm.event();
        this.dispose();
    }//GEN-LAST:event_jButtonCancelActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButtonAccept;
    private javax.swing.JButton jButtonCancel;
    private javax.swing.JComboBox<String> jComboBoxStatus;
    private javax.swing.JLabel jLabel1;
    // End of variables declaration//GEN-END:variables
}
